input_output_reformulation_sys: >
  You are an expert in creating diverse training data variations that enhance model robustness while maintaining task fidelity.
  You will receive a data point with either one or multiple columns.
  Your task is to:
  1. Create a meaningfully different version that preserves the core task objective and key information
  2. Vary the expression style, complexity, and structure while ensuring semantic equivalence
  3. Introduce moderate variations such as: different phrasing approaches, alternative examples, varied detail levels, or shifted perspectives
  4. Go beyond simple synonym replacement to create genuine diversity, but avoid changing the fundamental nature of the task
  5. Ensure the output would train the model on the same skill but through reasonably different expressions


input_output_reformulation_user: >
  Given this data point:
  {data}

  Create a diverse variation that:
  - Uses different vocabulary, sentence structures, and expression patterns
  - Maintains the same core information and task requirements
  - Could involve different contexts, examples, or perspectives
  - Should feel distinctly different while training the same capability
  
  Return your response in JSON format with the same schema as the input data.
input_reformulation_sys: >
  You are an expert in creating diverse text variations that maximize stylistic and structural diversity while preserving semantic intent.

  Your task is to:
  1. Create substantially different expressions that maintain the core content but vary significantly in form
  2. Transform the structure, style, and presentation while keeping the same underlying meaning
  3. Introduce variations in: complexity level, formality, directness, perspective, or domain context
  4. Use creative rephrasing techniques: restructuring, reframing, or alternative formulations
  5. Ensure the reformulation conveys the same information but through a distinctly different expression

  This creates robust training data by exposing models to diverse ways the same content might be expressed.

  Guidelines:
  - Maintain the core meaning but maximize surface-level diversity
  - Vary between simple/complex, formal/casual, direct/indirect approaches
  - Consider different ways to express the same content
  - Avoid mere synonym substitution - aim for structural and stylistic transformation
  - The output should feel like a completely different expression of the same idea

  Analyze the input's core meaning, then create a significantly transformed version that preserves only the essential content.

input_reformulation_user: >
  Given this input:
  {input}

  Create a substantially different version that:
  1. Maintains the core meaning but uses completely different wording and structure
  2. Could represent an alternative way to express the same content
  3. Varies in style, complexity, or perspective
  4. Feels fresh and distinct, not just a paraphrase

  Return only the reformulated text - make it as different as possible while preserving the essential meaning.

reward_function_generation_sys: >
  You are a Python code generator that creates reward functions for LLM evaluation.
  You must return a list of Python function strings. Here are examples showing the exact formatting, python indentation, and string escaping required:

  [
  "def format_reward_func(completions, **kwargs):\n    \"\"\"Reward function that checks if the completion has a specific format.\"\"\"\n    import re\n    pattern = r\"^<think>.*?</think><answer>.*?</answer>$\"\n    completion_contents = [completion[0][\"content\"] for completion in completions]\n    matches = [re.match(pattern, content) for content in completion_contents]\n    return [1.0 if match else 0.0 for match in matches]",

  "def reward_func_conciseness(completions, **kwargs):\n    \"\"\"Reward function that favors shorter, more concise answers.\"\"\"\n    return [100.0/(len(completion.split()) + 10) for completion in completions]"
  ]

  Critical formatting requirements:
  - The function will ONLY use the completions variable, which is a list of strings!
  - All strings must be properly escaped: \\n for newlines, \\\" for quotes
  - Python indentation must be exactly 4 spaces (written as \\n    in the string)
  - Function parameters must be exactly (completions, **kwargs)
  - Must return a list of float scores
  - Any required imports must be inside the function
  - Return only the list of function strings with no other text
  - Each function should be self-contained and evaluate one aspect

  Critical validation requirements:
  - Function MUST return a list (not tuple, not generator)
  - Return list MUST contain exactly one float score per input completion

reward_function_generation_user: >
  Generate {num_rewards} unique and simple reward functions that evaluate different aspects of LLM completions.
  Return them as a list of properly escaped Python function definition strings.
